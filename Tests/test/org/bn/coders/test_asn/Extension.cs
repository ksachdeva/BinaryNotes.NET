
//
// This file was generated by the BinaryNotes compiler (created by Abdulla Abdurakhmanov, modified by Sylvain Prevost).
// See http://bnotes.sourceforge.net 
// Any modifications to this file will be lost upon recompilation of the source ASN.1. 
//

using System;
using System.Numerics;

using org.bn.attributes;
using org.bn.attributes.constraints;
using org.bn.coders;
using org.bn.types;
using org.bn;

namespace test.org.bn.coders.test_asn {


    [ASN1PreparedElement]
    [ASN1Sequence(Name = "Extension", IsSet = false)]
    public class Extension : IASN1PreparedElement 
    {
        
        private ObjectIdentifier extnID_;
        [ASN1ObjectIdentifier( Name = "" )]
    
		[ASN1Element(Name = "extnID", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public ObjectIdentifier ExtnID
        {
            get { return extnID_; }
            set { extnID_ = value;  }
        }
  
        private bool critical_;
        [ASN1Boolean( Name = "" )]
    
		[ASN1Element(Name = "critical", IsOptional = false, HasTag = false, HasDefaultValue = true)]
        public bool Critical
        {
            get { return critical_; }
            set { critical_ = value;  }
        }
  
        private byte[] extnValue_;
        [ASN1OctetString( Name = "" )]
    
		[ASN1Element(Name = "extnValue", IsOptional = false, HasTag = false, HasDefaultValue = false)]
        public byte[] ExtnValue
        {
            get { return extnValue_; }
            set { extnValue_ = value;  }
        }
  

        public void initWithDefaults() 
        {
            bool param_Critical =         
            false;
        Critical = param_Critical;
    
        }

        private static IASN1PreparedElementData preparedData = CoderFactory.getInstance().newPreparedElementData(typeof(Extension));
        public IASN1PreparedElementData PreparedData 
        {
            get { return preparedData; }
        }

    }
            
}
